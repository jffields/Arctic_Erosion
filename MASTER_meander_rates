/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var WesternMack_1 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-136.6456709949952, 69.08700872525338],
          [-135.9095870106202, 67.87016851592068],
          [-139.8097334949952, 65.58436510570839],
          [-137.7223311512452, 64.72117178492286],
          [-137.0961104481202, 64.18582131453974],
          [-132.86735897662507, 64.13488777854788],
          [-132.14226132037507, 63.96663147147016],
          [-131.72478085162507, 63.62706112028824],
          [-132.16423397662507, 61.21772241622296],
          [-130.81291561725007, 58.961706898233146],
          [-127.73674374225007, 56.99327089862608],
          [-126.27556210162507, 55.547683741517396],
          [-124.39450906519401, 55.18418223783264],
          [-123.46067117456901, 54.82504107514072],
          [-122.66965554956901, 54.57108866017406],
          [-119.70334695581901, 53.55889196832195],
          [-117.87961648706901, 52.48844832964847],
          [-115.04514383081901, 52.94100627077756],
          [-112.71604226831901, 54.187173343213814],
          [-111.51853250269401, 55.259381607205],
          [-109.68381570581901, 55.781807596214904],
          [-107.81613992456901, 56.79995924397231],
          [-107.93698953394401, 57.337475413529546],
          [-110.2660286621488, 58.19765033824793],
          [-110.6780159668363, 58.461542875776566],
          [-110.7823860840238, 58.6463837443152],
          [-110.87851645511755, 58.64209618896625],
          [-111.02133872074255, 58.742002033794655],
          [-111.0185921387113, 59.54630702154173],
          [-112.3589241699613, 60.540548039770066],
          [-113.11835410160192, 61.29017605178613],
          [-113.56879355472692, 61.34158994661358],
          [-113.66217734378942, 61.31259760425681],
          [-114.01648642582067, 60.892299219090994],
          [-114.63446738285192, 60.8695777282006],
          [-114.93109824222692, 60.858879663748255],
          [-115.15082480472692, 60.79997622390134],
          [-116.18903281253942, 60.90832818122992],
          [-116.83447958988317, 61.12393190089451],
          [-117.7971565918363, 61.64517054926209],
          [-119.22054667045435, 62.47716940751586],
          [-119.90169901420435, 62.750060973609536],
          [-122.31319803764185, 62.69467530114029],
          [-122.99600661276838, 63.55539257222384],
          [-124.15231764792463, 64.60551065147534],
          [-123.80075514792463, 64.79331762591438],
          [-123.62772047995588, 64.95425769744203],
          [-123.33246291159651, 65.04943298104435],
          [-123.51511061667463, 65.15811986175466],
          [-124.08509852381793, 65.23314032381094],
          [-125.22767664881793, 65.83822432510175],
          [-126.28236414881793, 66.43049026853159],
          [-127.64673126694969, 66.52074455978627],
          [-128.20909393784814, 66.45911486041581],
          [-130.0117241586976, 67.33934298019352],
          [-130.9180962290101, 67.55214316628319],
          [-131.2312065805726, 67.52695949984033],
          [-131.7200981821351, 67.47230296197807],
          [-132.9066216196351, 67.30121806529371],
          [-133.3790337290101, 67.54165322583393],
          [-133.3131157602601, 67.75473063347964],
          [-133.77462392248088, 68.11158271667242],
          [-133.64004140294963, 68.54969176170329],
          [-133.83779530919963, 69.47427105762804],
          [-135.28799062169963, 69.73462108489251]]]),
    MERIT_Unioned_Streams = ee.FeatureCollection("users/jordanffieldsgr/ArcticCarbon/MERIT_Unioned_Streams"),
    MERIT_VF_Ord7 = ee.FeatureCollection("users/jordanffieldsgr/ArcticCarbon/MERIT_Vectors_filtered_Ord7"),
    Mack_GT_sites = ee.FeatureCollection("users/jordanffieldsgr/ArcticCarbon/Mack_Groundtruth_Sites"),
    New_cpixel_AOI = 
    /* color: #5220d6 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-133.965367054451, 67.70163967529295],
          [-133.954379343736, 67.80978401066871],
          [-133.89394771213844, 67.86573930174703],
          [-133.9269102520006, 67.93601095480037],
          [-133.80055313545822, 68.01841210695784],
          [-133.73462760090118, 68.07386747444518],
          [-133.72913374855213, 68.09795928576627],
          [-133.67968967043697, 68.10513068405275],
          [-133.65496760960747, 68.11485974236905],
          [-133.64810025240658, 68.15271273813845],
          [-133.7758307448652, 68.16191085922013],
          [-134.24005566052864, 68.20376666906606],
          [-134.1205657436365, 68.26996695929493],
          [-133.92278910214284, 68.39370357428372],
          [-133.94751102539507, 68.4810282009582],
          [-134.0230506308254, 68.55446250501647],
          [-134.10408406873006, 68.67116123899149],
          [-134.17000968094726, 68.71258563235436],
          [-134.41173717809684, 68.83739068478991],
          [-134.6520915792932, 68.95804575261798],
          [-134.7138970909606, 69.00139938646362],
          [-134.91716807244248, 68.97480603220676],
          [-134.96798568395178, 68.94077894009473],
          [-134.87047034533376, 68.89236035257777],
          [-134.6630786995987, 68.76527084631734],
          [-134.46237492964588, 68.6274852394607],
          [-134.39507573397157, 68.4863954284469],
          [-134.52555303519972, 68.27385905858004],
          [-134.61026458431925, 68.12065213970762],
          [-134.67033130647616, 68.01998013226864],
          [-134.69642647659177, 67.90764371076529],
          [-134.76149574841546, 67.69742465452227],
          [-134.93957242845428, 67.59947578660257],
          [-134.93290087421306, 67.48577873034489],
          [-134.61577674132107, 67.58020599374713],
          [-134.39367950440356, 67.6300859527481]]]),
    Good_Thiessens = ee.FeatureCollection("users/jordanffieldsgr/ArcticCarbon/Good_Thiessens_3"),
    cpixel_Masks = ee.ImageCollection("users/jordanffieldsgr/ArcticCarbon/cpixel_Masks_Sept23"),
    Mack_SlopeMask = ee.Image("users/jordanffieldsgr/ArcticCarbon/Mack_SlopeMask");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// uncomment to view assets
//Map.addLayer(MERIT_VF_Ord7, {}, "Merit streams"); // streamlines pre-unioning
//Map.addLayer(MERIT_Unioned_Streams, {}, "Merit unioned streams"); // combined streamlines
//Map.addLayer(Mack_GT_sites, {}, "GT Sites") // groundtruth locations
//Map.addLayer(WesternMack_1, {}, 'Western Mack 1'); // project AOI
//Map.addLayer(Good_Thiessens, {}, 'Thiessens'); // thiessen polygons

//// *** LOAD/PREP IMAGES *** //// 

// Defining function to remove Speckle for water occurence sensing code
var removeSpeckle = function(image){
  var imageSel = image.select(['Green', 'NIR']);
  var replaceNegatives = imageSel.where(imageSel.lt(0), 1);
  var returnImage = image.addBands(replaceNegatives, null, true);
  return returnImage;
  };

//Function to get and rename bands all landsat 8 collection 2 images.
function renameOli(img) {
  return img.select(
                  ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'], 
                  ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
            .copyProperties(img, img.propertyNames()); 
}

// Functions to rename bands in LS5 and LS7 Collection 2 images.
function renameEtm(img) {
  return img.select(
                  ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7'],
                  ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
            .copyProperties(img, img.propertyNames()); 
}

// collection 2 landsat images
var ls5new = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
                                .filter(ee.Filter.bounds(WesternMack_1)) // study area
                                .filter(ee.Filter.dayOfYear(151,288)) // ice off season
                                .filterMetadata('CLOUD_COVER', 'less_than', 20); // images with few clouds
var ls7new = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
                                .filter(ee.Filter.bounds(WesternMack_1))
                                .filter(ee.Filter.dayOfYear(151,288))
                                .filterMetadata('CLOUD_COVER', 'less_than', 20);
                                
var ls8new = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
                                .filter(ee.Filter.bounds(WesternMack_1))
                                .filter(ee.Filter.dayOfYear(151,288))
                                .filterMetadata('CLOUD_COVER', 'less_than', 20);

// Rename bands
var etmCol_new = ls7new.map(renameEtm);
var tmCol_new = ls5new.map(renameEtm);
var oliCol_new = ls8new.map(renameOli);

// Merge the collections.
var allImages_tm_new = etmCol_new
                      .merge(tmCol_new)
                      .map(removeSpeckle);
var allImages_NEW = oliCol_new
                      .merge(allImages_tm_new);

///// END LOAD/PREP IMAGES /////

/// *** DEFINE WATER DETECTION FUNCTIONS *** ///

// Function for masking all pixels in an image except water pixels
// using WRI and band-based filters
var waterOnly = function(image){ 
  // band-based filters
  var land = image.select('SWIR2').lt(10909.09).rename('land'); // determined manually
  var cloudFinal = image.select('Blue').add(image.select('Green'))
      .lt(22545.45).rename('cloudFinal'); // determined manually
  
  // calculate WRI (water detection algorithm)
  var GREEN = image.select('Green');
  var RED = image.select('Red');
  var NIR = image.select('NIR');
  var SWIR1 = image.select('SWIR1');
  var WRI = (GREEN.add(RED)).divide(NIR.add(SWIR1)); 
  
  // save the image's original mask (edges and/or LS7 stripes) for use later
  // can select any band, rename for clarity
  var orig_mask = image.unmask(-1).gte(0).select(["Green"],["orig_mask"]);
  
  // return image with water band, mask water band to show water occurrence
  return image.addBands(ee.Image(1).rename('water'))
              .updateMask(cloudFinal)
              .updateMask(land)
              .updateMask(Mack_SlopeMask) // remove any areas with slope greater than 22
              .updateMask(WRI.gt(1)) // cutoff of 1 for WRI
              .addBands(WRI) // for reference later
              .addBands(orig_mask);
};

// Function to unmask the image, setting valid non-water pixels = 0 and masking invalid pixels
// invalid pixels are those masked in the original image
var getUnmask = function(image){
  return(image.unmask(0).mask(image.select("orig_mask")));
  };

// For a given set of years:
// Of all selected images, only select water pixels
// Result is mean water occurrence (1 = always water, 0 = never water)
var getWater_years = function(year){
  var startDate = ee.Date.fromYMD(year, 1, 1);
  var endDate = startDate.advance(2, 'year'); // rolling 2 year time window
    
  // get the right connected pixel mask
  var connectedMask = cpixel_Masks.filter(ee.Filter.eq('year', year)).first();
 
  var water = allImages_NEW
            .filterDate(startDate, endDate)
            .map(waterOnly)       // calculate per-pixel water occurrence in each image
            .map(getUnmask)       // unmask the image to set valid non-water pixels = 0
            .select('water')      // select only the water occurrence band
            .mean()            // compute the mean water occurrence for each pixel across all images
            .gt(0.20)  ;       //threshold for % of time (images) that a pixel must be water to be counted as water
            
  return ee.Image(water
          .updateMask(water)
          .updateMask(connectedMask) // mask out any lake areas as determined by connected pixels
          .set('start_year',year)
          .rename('water'));
  };
  
// Subtract water occurence of earlier year from more recent year
// takes a map of yearly water occurrence (output of getWater_years)
// results in map of area that changed between land and water
var getareaChange = function(image){
  var year_sel = ee.Number(image.get('start_year'));
  var year_pre = year_sel.subtract(5);
  var pre_image = ee.Image(waterYear_long
    .filterMetadata('start_year', 'equals', year_pre)
    .first());
  var pre_land = pre_image.gt(0).unmask(0).eq(0);
  // any area that is land in pre image but not current image is land lost
  // (this represents erosion)
  var landLost = image.updateMask(pre_land);
  var post_land = image.gt(0).unmask(0).eq(0);
  // any area that is land in current image but not pre image is land gained
  // (this represents aggradation)
  var landGained = pre_image.updateMask(post_land);
  return ee.Image(landLost).rename('Land Lost')
                           .addBands(landGained.rename('Land Gained'))
                           // also add water band for total water area calculation later
                           .addBands(image); // can comment this out if only doing land gained/lost calculation
  };

/// *** END DEFINING FUNCTIONS *** ///

/// *** define thiessen polygon asset *** ///
var thiessen_polys = Good_Thiessens;

/// *** BEGIN ANALYSIS *** ///

// Construct list 1985-2023 -- all years for which we have data
var waterYear = ee.List.sequence(1985,2023,1);

// Calculate water occurrence for each year
var waterYear_long = ee.ImageCollection(waterYear.map(getWater_years));

// Filter for 1990 onwards: we will later do area calculations over a 5 year span,
// so can't perform the first calculation until 1990, when we have 5 years of data
var waterYear_short = waterYear_long.filter(ee.Filter.gte('start_year', 1990));

// Generate water occurence difference for each range of years
var mappedArea = waterYear_short.map(getareaChange);

// BIG LOOP (uncomment for batched exports)
// for(var i = 0; i < 28; i++) {
//   var tFirst = (i * 100)
//   var tEnd = (tFirst + 100);

// select only a subset of thiessen polys -- only for use with batched exports
// var tlist_ALL = thiessen_polys.aggregate_array('point_ID'); 
// var tlist_select = tlist_ALL.slice(tFirst,tEnd); 
// var thiessen_polys = thiessen_polys.filter(ee.Filter.inList('point_ID', tlist_select)); 

// Function to count amount of area change in thiessen polygons
// takes a map of area change (output of getareaChange)
// uses the thiessen_polys collection (which may be a subset of all thiessen polys, if doing batch export)
// returns feature collection with area lost/gained in each poly, along with 'MERIT Hydro' raster properties 
/* *** NOTE: can comment out some properties if only doing total water area export
  or only area gained/lost export -- see inline comments below *** */
var areaCount = function(image){
  var start_year = image.get('start_year');
  var pixelArea = ee.Image.pixelArea();
  
  // create image where each pixel's value is the pixel's area
  // "image" is 1 where water and masked elsewhere, so sum of unmasked pixels
  // in pixelArea image is equal to area of water.
  // same principle applies for area gained/area lost calculations
  var image1 = pixelArea.multiply(image);
  
  // calculate area within each thiessen polygon
  var reduced = image1.reduceRegions({
      reducer: ee.Reducer.sum(), // sums each band individually
      collection: thiessen_polys,
      scale: 30, // landsat images have 30m pixels
      crs: image.projection()
    });
    // generate properties over each feature before returning the entire feature collection
    // note -- some of the properties are redundant/already existing, but we trim down the
    // list of properties to export later
    return reduced.map(function(feature){
      return ee.Feature(feature)
                        .set('start_year', start_year)
                        .setGeometry(null)
                        .set('latitude', feature.geometry().centroid().coordinates().get(1))
                        .set('longitude', feature.geometry().centroid().coordinates().get(0))
                        // comment out line below if not doing total water area calculation
                        .set('Water_Area_km2', ee.Number(feature.get('water')).divide(1e6)) // converts from m2 to km2
                        // comment out the 2 lines below if not doing land gained/lost calculation
                        //.set('area_gained_km2', ee.Number(feature.get('Land Gained')).divide(1e6)) // converts from m2 to km2
                        //.set('area_lost_km2', ee.Number(feature.get('Land Lost')).divide(1e6)) // converts from m2 to km2
                        .set('Polygon_Area_km2', feature.get('Area_km2'))
                        .set('Stream_Order', feature.get('mean'))
                        .set('Flow_Dir', feature.get('dir'))
                        .set('Elv', feature.get('elv'))
                        .set('Thiessen_ID', feature.get('point_ID'))
                        .set('Upstream_Area_km2', feature.get('upa'))
                        .set('Upstream_pix', feature.get('upg'))
                        .set('Hydro_Adj_Elv', feature.get('hnd'))
                        .set('Width', feature.get('wth'));
    });
};

// function to select desired properties for export
// *** NOTE: can remove Water_Area_km2 from list if only doing area gained/lost export,
//  and can remove area_gained_km2 and area_lost_km2 if only doing total water area export
var get_export_props = function(feature) {
  return ee.Feature(feature.select(['start_year', 'Water_Area_km2', 'area_gained_km2', 'area_lost_km2', 
                                    'Polygon_Area_km2', 'latitude', 'longitude', 'Stream_Order', 
                                    'Flow_Dir', 'Elv', 'Thiessen_ID', 'Upstream_Area_km2', 
                                    'Upstream_pix', 'Hydro_Adj_Elv', 'Width']));
};

///////////// Calculate AREA LOST/GAINED by segment over all years, flatten output, select properties /////////////
// comment these 2 lines out if only doing total water area export
var pixelsChanged = ee.FeatureCollection(mappedArea.map(areaCount)).flatten();
var pixelsChanged_to_export = pixelsChanged.map(get_export_props);


//////////// Calculate TOTAL AREA covered by water by thiessen polygon over all years ////////////////
// comment these 2 lines out if only doing area gained/lost export
// note -- using areaCount feature on waterYear_long collection, which holds
//  yearly water occurrence images (different from usage for area gained/lost export)
var totalArea = ee.FeatureCollection(waterYear_long.map(areaCount)).flatten();
var totalArea_to_export = totalArea.map(get_export_props);

/////////////// ALL EXPORTS ////////////////////

// Export area lost to drive
Export.table.toDrive({
  collection: pixelsChanged_to_export,
  folder: 'ARCTIC_CARBON',
  description: 'AreaChanged_all', //if batch exports: 'AreaChanged_'+ 'Thiessens_' + tFirst + '_' + tEnd,
  fileNamePrefix: 'AreaChanged_all', //if batch exports: 'AreaChanged_'+ 'Thiessens_' + tFirst + '_' + tEnd,
  fileFormat: 'CSV'
});

//Export Total Water Area
// will not work unless area gained/lost properties are commented out as noted above
Export.table.toDrive({
  collection: totalArea_to_export,
  folder: 'ARCTIC_CARBON',
  description: 'TotalArea_all', //if batch exports: 'TotalArea_' + 'Thiessens_' + tFirst + '_' + tEnd,
  fileNamePrefix: 'TotalArea_all', //if batch exports: 'TotalArea_' + 'Thiessens_' + tFirst + '_' + tEnd,
  fileFormat: 'CSV'
});

/////////////// END EXPORTS ////////////////////

//} // END FOR LOOP used for batch exports