/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var mackenzie = /* color: #bf04c2 */ee.Geometry.LineString(
        [[-134.2465691616823, 68.6722175532347],
         [-134.1971306851198, 68.63722731907842],
         [-134.1476922085573, 68.60318441368062],
         [-134.19987726715104, 68.58413792328467],
         [-134.2410759976198, 68.54097303140227],
         [-134.26030207183854, 68.50577763308955],
         [-134.22184992340104, 68.49269105565659],
         [-134.1257195523073, 68.50275832712433],
         [-134.0927605679323, 68.49772525264883],
         [-134.0982537319948, 68.4765740795053],
         [-134.15043879058854, 68.4574202284754],
         [-134.2136101773073, 68.44834168636945],
         [-134.19438410308854, 68.42108419308911],
         [-134.07353449371354, 68.40592695916912],
         [-134.0598015835573, 68.38772489671442],
         [-134.15593195465104, 68.36849576092364],
         [-134.2300896694948, 68.35127693911646],
         [-134.23283625152604, 68.30868036690815],
         [-134.40861750152604, 68.28633605162516],
         [-134.3674187710573, 68.25481369918849],
         [-134.4333367398073, 68.21815245238963],
         [-134.4553093960573, 68.19163832293026],
         [-134.42509699371354, 68.13135772593334],
         [-134.47453547027604, 68.03499002865465],
         [-134.4388299038698, 67.95678074234223],
         [-134.34269953277604, 67.88761369359466],
         [-134.33171320465104, 67.82791459077875],
         [-134.3234734585573, 67.75628427760898],
         [-134.28227472808854, 67.68339141153241],
         [-134.2026238491823, 67.62700495466262],
         [-133.9883904507448, 67.57153128762995],
         [-133.81472431364185, 67.49817780498019],
         [-133.78725849332935, 67.47083210952263],
         [-133.77077900114185, 67.45188202354258],
         [-133.65542255582935, 67.46767481056398],
         [-133.5922511691106, 67.4718844493123],
         [-133.5483058566106, 67.44872220736981],
         [-133.5483058566106, 67.4023299941533],
         [-133.41921650114185, 67.33574731329162],
         [-133.07864032926685, 67.24136930274052],
         [-133.0099757784856, 67.20947271216173],
         [-132.8396876925481, 67.19883111369506],
         [-132.5924953097356, 67.25199210369632],
         [-132.41946064176685, 67.30927414087272],
         [-132.1145900362981, 67.33680563140392],
         [-131.68161941844724, 67.40353742420699],
         [-131.5085847504785, 67.4572991663015],
         [-131.23117996532224, 67.45203377213693],
         [-131.1350495942285, 67.45308694421828],
         [-131.01145340282224, 67.47940109726548],
         [-130.90708328563474, 67.47098373722758],
         [-130.84665848094724, 67.40353742420699],
         [-130.7615144379785, 67.33907459604886],
         [-130.5417878754785, 67.31684219064844],
         [-130.35227371532224, 67.27019299876498],
         [-130.2341706879785, 67.10727296605565],
         [-130.23691727000974, 66.99804636764657],
         [-130.151773227041, 66.87430772747592],
         [-130.11057449657224, 66.80300862746594],
         [-129.9595124848535, 66.7596960261575],
         [-129.80845047313474, 66.73909579067121],
         [-129.62717605907224, 66.73584154581553],
         [-129.49534012157224, 66.68262798131816],
         [-129.3662507661035, 66.62712039177573],
         [-129.283853305166, 66.5965926226954],
         [-129.2344148286035, 66.55073040564959],
         [-129.07785965282224, 66.52995536537242],
         [-129.00095535594724, 66.45216854876146],
         [-128.95933901921882, 66.39394391360861],
         [-128.81926333562507, 66.38184255805659],
         [-128.69566714421882, 66.35431772481772],
         [-128.66820132390632, 66.32235103988906],
         [-128.63249575750007, 66.28261159846429],
         [-128.71489321843757, 66.24059623838612],
         [-128.82200991765632, 66.22399193422594],
         [-128.89616763250007, 66.19629380295049],
         [-129.09941470281257, 66.12302466235579],
         [-129.09666812078132, 65.97025747247682],
         [-129.06370913640632, 65.9064269104806],
         [-128.99504458562507, 65.85255122539512],
         [-128.86870181218757, 65.80869385996212],
         [-128.79729067937507, 65.77490649254871],
         [-128.78585232206524, 65.72094032453833],
         [-128.8105715603465, 65.68025198549063],
         [-128.70894802519024, 65.65648755382493],
         [-128.60457790800274, 65.63610068572218],
         [-128.530420193159, 65.61569778681897],
         [-128.31893337675274, 65.60775899467473],
         [-128.11568630644024, 65.61683170193392],
         [-127.959131130659, 65.58619861125528],
         [-127.79158962675275, 65.52482402292776],
         [-127.56087673612775, 65.44390745728654],
         [-127.4049776217527, 65.39821021418881],
         [-127.3006075045652, 65.33753852628851],
         [-127.1248262545652, 65.30313391790287],
         [-126.88587361784646, 65.2594901683187],
         [-126.6688936373777, 65.22843622731767],
         [-126.3942354342527, 65.14891017594196],
         [-126.2459200045652, 65.10847952938715],
         [-126.15674754609248, 65.01556456275964],
         [-126.05787059296748, 64.9574975451764],
         [-125.94526072968623, 64.92026842134278],
         [-125.78046580781123, 64.92026842134278],
         [-125.66236278046748, 64.88298753708773],
         [-125.50855418671748, 64.89580868275921],
         [-125.32178660859248, 64.87832378435422],
         [-125.21741649140498, 64.87016026855869],
         [-125.12952586640498, 64.86432766725252],
         [-125.11579295624873, 64.80827026269229],
         [-125.09931346406123, 64.7403783266165],
         [-125.09382029999873, 64.69228264964347],
         [-125.03614207734248, 64.68288815825969],
         [-124.97846385468623, 64.69463076364198],
         [-124.89606639374873, 64.69463076364198],
         [-124.87409373749873, 64.67349040959486],
         [-124.91444573370346, 64.65431566634543],
         [-124.92387553681513, 64.63307236949255],
         [-124.89160319794794, 64.62056733954378],
         [-124.87873633328984, 64.60833867267837],
         [-124.8929905201074, 64.59611039389766],
         [-124.92216427448392, 64.5747416519247],
         [-124.91254588593623, 64.54984261415251],
         [-124.94225295081341, 64.5113321166361],
         [-124.89556105628216, 64.48886595264703],
         [-124.81316359534466, 64.46993274872939],
         [-124.78844435706341, 64.43558290118976],
         [-124.76372511878216, 64.38932030885435],
         [-124.71154006018841, 64.31561392464279],
         [-124.55498488440716, 64.29894320340199],
         [-124.48906691565716, 64.25509675611728],
         [-124.42314894690716, 64.20135869722161],
         [-124.42314894690716, 64.14991139107566],
         [-124.43688185706341, 64.05514285911897],
         [-124.42589552893841, 64.01907016533573],
         [-124.37645705237591, 64.00222027494127],
         [-124.34899123206341, 63.95884528873656],
         [-124.22814162268841, 63.972105893993714],
         [-124.17046340003216, 63.92989124372542],
         [-124.12377150550091, 63.89728215725684],
         [-124.02764113440716, 63.86463514764777],
         [-123.97270949378216, 63.757966446744256],
         [-123.88207228675091, 63.71178002416422],
         [-123.80791457190716, 63.63626111648971],
         [-123.75298293128216, 63.53362386868088],
         [-123.68157179846966, 63.41832839873344],
         [-123.67058547034466, 63.333400406301266],
         [-123.59093459143841, 63.261817202088444],
         [-123.3650378217478, 63.17146810515776],
         [-123.3046130170603, 63.13673871393582],
         [-123.27989377877905, 63.063422667797006],
         [-123.25792112252905, 63.03603712261585],
         [-123.2551745404978, 62.98493169036956],
         [-123.2222155561228, 62.966212209963054],
         [-123.2277087201853, 62.91248320947434],
         [-123.24693479440405, 62.85239007015792],
         [-123.2002428998728, 62.793429529040246],
         [-123.1562975873728, 62.75950510833292],
         [-123.1892565717478, 62.70665613532911],
         [-123.2002428998728, 62.618364136216556],
         [-123.2551745404978, 62.49684941605188],
         [-123.2991198529978, 62.41652874996705],
         [-123.36229123971655, 62.34649916605977],
         [-123.4089831342478, 62.29801946349472],
         [-123.35130491159155, 62.26224751029153],
         [-123.24144163034155, 62.225153159693505],
         [-123.12608518502905, 62.1803233122406],
         [-123.0134753217478, 62.153393454155534],
         [-122.8816393842478, 62.13927776833231],
         [-122.7662829389353, 62.12772367520877],
         [-122.67015256784155, 62.14826123891123],
         [-122.51085081002905, 62.14184474617217],
         [-122.4586657514353, 62.130291632299574],
         [-122.3652819623728, 62.143128153500726],
         [-122.2828845014353, 62.09817652188218],
         [-122.09337034127905, 62.06088035759488],
         [-121.9917468061228, 62.05444535321645],
         [-121.92518290410317, 62.03611720470027],
         [-121.84553202519692, 61.99874478481731],
         [-121.72468241582192, 61.97810587309221],
         [-121.62855204472817, 61.96261751607144],
         [-121.56812724004067, 61.93032483840604],
         [-121.40882548222817, 61.888940352080915],
         [-121.25227030644692, 61.846203913915254],
         [-121.01606425175942, 61.839723493996594],
         [-120.84302958379067, 61.82805528675521],
         [-120.70295390019692, 61.79172580750627],
         [-120.71668681035317, 61.76315105493387],
         [-120.68922099004067, 61.715033606967445],
         [-120.70844706425942, 61.66684094600172],
         [-120.74415263066567, 61.61465606785673],
         [-120.68647440800942, 61.58591683601971],
         [-120.66948827975183, 61.553226244041895],
         [-120.61181005709558, 61.521810851350615],
         [-120.54039892428308, 61.495607077677214],
         [-120.47997411959558, 61.47069303525791],
         [-120.41405615084558, 61.44182027933526],
         [-120.33989843600183, 61.44313325767647],
         [-120.25475439303308, 61.44313325767647],
         [-120.16686376803308, 61.406348961599655],
         [-120.05700048678308, 61.36557289226871],
         [-119.95537695162683, 61.32210762802985],
         [-119.84002050631433, 61.32342564387066],
         [-119.73015722506433, 61.28781975463261],
         [-119.60930761568933, 61.27462212711777],
         [-119.51592382662683, 61.23103057647605],
         [-119.44176611178308, 61.221776109597826],
         [-119.33464941256433, 61.23235242097999],
         [-119.24126562350183, 61.21516410945436],
         [-118.99681982272058, 61.25085241272592],
         [-118.83202490084558, 61.26670088713836],
         [-118.69194921725183, 61.30101183466521],
         [-118.52990087740808, 61.30760579488588],
         [-118.40355810397058, 61.35372471263581],
         [-118.32940038912683, 61.41292076620625],
         [-118.11302276461967, 61.44838461823913],
         [-117.93174835055717, 61.423432777047175],
         [-117.76970001071342, 61.387940549464226],
         [-117.62413116305717, 61.29705479304394],
         [-117.40440460055717, 61.22442052074909],
         [-117.20115753024467, 61.12245015789127],
         [-116.97319122165092, 61.09325516710712]]),
    lakes = ee.FeatureCollection("users/JohnPerrotti/HydroLAKES_polys_v10_shp"),
    lat67 = 
    /* color: #ff0000 */
    /* shown: false */
    ee.Geometry.LineString(
        [[-139.9739142314343, 67.57763006526794],
         [-125.58889654024293, 67.53463809829742]]),
    AOI = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-134.39065494946573, 68.48015540364264],
          [-134.67080631665323, 68.01808869704391],
          [-134.74771061352823, 67.69926296760585],
          [-133.9882806818876, 67.69978408190671],
          [-134.0913690386466, 68.0342905750833],
          [-134.33006781744064, 68.2121964631545],
          [-133.90176334790323, 68.26148211302507],
          [-134.17092838696573, 68.76050332732228],
          [-134.6683029860386, 68.95374203475546],
          [-134.98391666821573, 69.27776221016349],
          [-135.2915338557157, 69.2680415834709],
          [-135.18716373852823, 69.03736579596243],
          [-134.87405338696573, 68.89145620350125],
          [-134.45657291821573, 68.6267739799592]]]),
    thiessenpolys = ee.FeatureCollection("users/jekreisler/mackenzie/Thiessen_Polygons"),
    New_cpixel_AOI = 
    /* color: #5220d6 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-133.965367054451, 67.70163967529295],
          [-133.954379343736, 67.80978401066871],
          [-133.89394771213844, 67.86573930174703],
          [-133.9269102520006, 67.93601095480037],
          [-133.80055313545822, 68.01841210695784],
          [-133.73462760090118, 68.07386747444518],
          [-133.72913374855213, 68.09795928576627],
          [-133.67968967043697, 68.10513068405275],
          [-133.65496760960747, 68.11485974236905],
          [-133.64810025240658, 68.15271273813845],
          [-133.7758307448652, 68.16191085922013],
          [-134.24005566052864, 68.20376666906606],
          [-134.1205657436365, 68.26996695929493],
          [-133.92278910214284, 68.39370357428372],
          [-133.94751102539507, 68.4810282009582],
          [-134.0230506308254, 68.55446250501647],
          [-134.10408406873006, 68.67116123899149],
          [-134.17000968094726, 68.71258563235436],
          [-134.41173717809684, 68.83739068478991],
          [-134.6520915792932, 68.95804575261798],
          [-134.7138970909606, 69.00139938646362],
          [-134.91716807244248, 68.97480603220676],
          [-134.96798568395178, 68.94077894009473],
          [-134.87047034533376, 68.89236035257777],
          [-134.6630786995987, 68.76527084631734],
          [-134.46237492964588, 68.6274852394607],
          [-134.39507573397157, 68.4863954284469],
          [-134.52555303519972, 68.27385905858004],
          [-134.61026458431925, 68.12065213970762],
          [-134.67033130647616, 68.01998013226864],
          [-134.69642647659177, 67.90764371076529],
          [-134.76149574841546, 67.69742465452227],
          [-134.93957242845428, 67.59947578660257],
          [-134.93290087421306, 67.48577873034489],
          [-134.61577674132107, 67.58020599374713],
          [-134.39367950440356, 67.6300859527481]]]),
    WesternMack_1 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-136.6456709949952, 69.08700872525338],
          [-135.9095870106202, 67.87016851592068],
          [-139.8097334949952, 65.58436510570839],
          [-137.7223311512452, 64.72117178492286],
          [-137.0961104481202, 64.18582131453974],
          [-132.86735897662507, 64.13488777854788],
          [-132.14226132037507, 63.96663147147016],
          [-131.72478085162507, 63.62706112028824],
          [-132.16423397662507, 61.21772241622296],
          [-130.81291561725007, 58.961706898233146],
          [-127.73674374225007, 56.99327089862608],
          [-126.27556210162507, 55.547683741517396],
          [-124.39450906519401, 55.18418223783264],
          [-123.46067117456901, 54.82504107514072],
          [-122.66965554956901, 54.57108866017406],
          [-119.70334695581901, 53.55889196832195],
          [-117.87961648706901, 52.48844832964847],
          [-115.04514383081901, 52.94100627077756],
          [-112.71604226831901, 54.187173343213814],
          [-111.51853250269401, 55.259381607205],
          [-109.68381570581901, 55.781807596214904],
          [-107.81613992456901, 56.79995924397231],
          [-107.93698953394401, 57.337475413529546],
          [-110.2660286621488, 58.19765033824793],
          [-110.6780159668363, 58.461542875776566],
          [-110.7823860840238, 58.6463837443152],
          [-110.87851645511755, 58.64209618896625],
          [-111.02133872074255, 58.742002033794655],
          [-111.0185921387113, 59.54630702154173],
          [-112.3589241699613, 60.540548039770066],
          [-113.11835410160192, 61.29017605178613],
          [-113.56879355472692, 61.34158994661358],
          [-113.66217734378942, 61.31259760425681],
          [-114.01648642582067, 60.892299219090994],
          [-114.63446738285192, 60.8695777282006],
          [-114.93109824222692, 60.858879663748255],
          [-115.15082480472692, 60.79997622390134],
          [-116.18903281253942, 60.90832818122992],
          [-116.83447958988317, 61.12393190089451],
          [-117.7971565918363, 61.64517054926209],
          [-119.22054667045435, 62.47716940751586],
          [-119.90169901420435, 62.750060973609536],
          [-122.31319803764185, 62.69467530114029],
          [-122.99600661276838, 63.55539257222384],
          [-124.15231764792463, 64.60551065147534],
          [-123.80075514792463, 64.79331762591438],
          [-123.62772047995588, 64.95425769744203],
          [-123.33246291159651, 65.04943298104435],
          [-123.51511061667463, 65.15811986175466],
          [-124.08509852381793, 65.23314032381094],
          [-125.22767664881793, 65.83822432510175],
          [-126.28236414881793, 66.43049026853159],
          [-127.64673126694969, 66.52074455978627],
          [-128.20909393784814, 66.45911486041581],
          [-130.0117241586976, 67.33934298019352],
          [-130.9180962290101, 67.55214316628319],
          [-131.2312065805726, 67.52695949984033],
          [-131.7200981821351, 67.47230296197807],
          [-132.9066216196351, 67.30121806529371],
          [-133.3790337290101, 67.54165322583393],
          [-133.3131157602601, 67.75473063347964],
          [-133.77462392248088, 68.11158271667242],
          [-133.64004140294963, 68.54969176170329],
          [-133.83779530919963, 69.47427105762804],
          [-135.28799062169963, 69.73462108489251]]]),
    cpix_mask_1985 = ee.Image("users/jordanffieldsgr/ArcticCarbon/cpixel_Mask_1985"),
    cpixel_Mask_1985_test = ee.Image("users/jordanffieldsgr/ArcticCarbon/cpixel_Mask_1985_test"),
    cpixel_Mask_1985_test1 = ee.Image("users/jordanffieldsgr/ArcticCarbon/cpixel_Mask_1985_test1"),
    cpixel_Mask_2014 = ee.Image("users/jordanffieldsgr/ArcticCarbon/cpixel_Mask_2014"),
    High_Relief_Region = ee.FeatureCollection("users/jordanffieldsgr/ArcticCarbon/High_Relief_Region"),
    Good_Thiessens = ee.FeatureCollection("users/jordanffieldsgr/ArcticCarbon/Good_Thiessens_3"),
    cpixel_Masks_Sept23 = ee.ImageCollection("users/jordanffieldsgr/ArcticCarbon/cpixel_Masks_Sept23"),
    cpixel_Masks_Jun23 = ee.ImageCollection("users/jordanffieldsgr/ArcticCarbon/cpixel_Masks_Jun23");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// load pre-generated assets: rivers, segment buffers, and re-defined project area
// this is much faster then attempting to generate them from scratch
var current_masks = ee.ImageCollection('users/jordanffieldsgr/ArcticCarbon/cpixel_Masks_Sept23');
var old_masks = ee.ImageCollection('users/jordanffieldsgr/ArcticCarbon/cpixel_Masks_Jun23');
Map.addLayer(current_masks.first(), {min:0, max:1, palette: ["white", "red"]}, '2020 cpixel Mask');
Map.addLayer(current_masks.first(), {min:0, max:1, palette: ["white", "blue"]}, '1985 cpixel Mask (old)');
//Map.addLayer(WesternMack_1, {}, 'Western Mack 1');
Map.addLayer(New_cpixel_AOI, {}, 'New CPixel AOI');
//Map.addLayer(cpixel_1985_apr23, {min:0, max:1024, palette:["red", "blue", "green"]}, "cpixel 1985 (new)")
Map.addLayer(Good_Thiessens, {}, 'Good Thiessens'); 

//IMAGE IMPORT CODE BELOW IS THE SAME AS THE MAIN CODE

///////////////////////////////////////////////////////////////////////////////////////////////
                /////// PREPARE IMAGE COLLECTIONS FOR ANALYSIS ///////
///////////////////////////////////////////////////////////////////////////////////////////////

////// RENAME BANDS ///////
//Function to get and rename bands all landsat 8 collection 2 images.
function renameOli(img) {
  return img.select(
    ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'QA_PIXEL', 'SR_QA_AEROSOL'],
    ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa', 'SR_QA_AEROSOL']);
}

// Functions to rename bands in LS5 and LS7 Collection 2 images.
function renameEtm(img) {
  return img.select(
      ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL'],
      ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']);
}

//////// SCALE BANDS TO SURFACE REFLECTANCE //////////
// Transformation function, scales Raw Collection 2 Level 2 Landsat data
// to surface refelctance values, as explained here:
// https://www.usgs.gov/faqs/how-do-i-use-a-scale-factor-landsat-level-2-science-products#:~:text=Landsat%20Collection%202%20surface%20temperature,the%20scale%20factor%20is%20applied.
// FOR LANDSAT8
function Olito_SR(img) {
  return img.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
  .multiply(0.0000275) // scaling to surf reflectance
  .add(-0.2)
  .addBands(img.select('pixel_qa'))
  .addBands(img.select('SR_QA_AEROSOL'));
}

// Transformation function, scales Raw Collection 2 Level 2 Landsat data
// to surface refelctance values. 
// FOR LANDSAT 5 AND LANDSAT 7 COLLECTIONS
function ETMto_SR(img) {
  return img.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
  .multiply(0.0000275) // scaling to surf reflectance
  .add(-0.2)
  .addBands(img.select('pixel_qa'));
}

////////// FULL IMAGE PREP ///////////
// Define wrapper function to prepare images: 
// consolidates all above functions for convenience in 
// applying them to their respective image collections.
function prepOli(img) {
  var orig = img;
  img = renameOli(img);
  img = Olito_SR(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}

// Define function to prepare ETM+ images.
// works for TM images as well (landsat 5)
function prepETM(img) {
  var orig = img;
  img = renameEtm(img);
  img = ETMto_SR(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}

//// IMPORT IMAGES ////

// ARCTIC DEM (FOR CALCULATING SLOPE)
var arcticDEM = ee.Image("UMN/PGC/ArcticDEM/V3/2m_mosaic").int16(); //.clip(High_Relief_North);
//print('Arctic DEM Type:', arcticDEM);
//Map.addLayer(arcticDEM, {}, 'Arctic DEM');
// Load an SRTM image.
var SRTM1 = ee.Image("CGIAR/SRTM90_V4").int16();
//print('SRTM DEM Type:', SRTM1);

// Get information about the SRTM projection.
var srtmProjection = SRTM1.projection();
//print('SRTM projection:', srtmProjection);


// Display the aggregated, reprojected SRTM data.
//Map.addLayer(arcticMean, {max: 80}, 'ArcticDEM at SRTM scale');


var allDEM = ee.ImageCollection([SRTM1,arcticDEM]).mean(); 
var allDEM = allDEM.round().int16();
var allDEM = allDEM.setDefaultProjection(srtmProjection);
//print('Combined DEM Type:', allDEM);
//Map.addLayer(allDEM, {}, 'Combined DEM');

// Get the Artic DEM data at SRTM scale and projection.
var arcticMean = allDEM
    // Force the next reprojection to aggregate instead of resampling.
    .reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 65536
    })
    // Request the data at the scale and projection of the MODIS image.
    .reproject({
      crs: srtmProjection
    });

var arcticMean = arcticMean.round().int16();
var AOI_DEM = arcticMean.clip(High_Relief_Region);
//var AOI_DEM = allDEM.clip(High_Relief_Region);
//Map.addLayer(AOI_DEM,{}, "AOI DEM");

var slope = ee.Terrain.slope(AOI_DEM);
var slope_img_mask = slope.mask().eq(1); // extract image's mask and create mask to filter out partially transparent pixels
var ArcticSlopeMask = slope.updateMask(slope_img_mask).unmask(1).lt(22)
// mask any partially transparent pixels
// unmask masked pixels and set to 1 (so they pass the filter)
// any slope over 22 is invalid and will be masked out

var ArcticSlopeMask = ArcticSlopeMask.updateMask(ArcticSlopeMask) 
//var ArcticSlopeMask_clip = ArcticSlopeMask.clip(High_Relief_North);
//Map.addLayer(slope, {min: 0, max: 25, palette: ['white', 'white', 'red']}, 'slope'); 
//Map.addLayer(ArcticSlopeMask, {min:0, max:1, palette: ['white', 'red']}, 'Arctic 22% Slope Mask')


                                
// COLLECTION 2 DATA //
var ls5new = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
                                .filter(ee.Filter.bounds(WesternMack_1)) // change this if re-defining project area
                                .filter(ee.Filter.dayOfYear(151,288))
                                .filterMetadata('CLOUD_COVER', 'less_than', 20);
var ls7new = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
                                .filter(ee.Filter.bounds(WesternMack_1)) // change this if re-defining project area
                                .filter(ee.Filter.dayOfYear(151,288))
                                .filterMetadata('CLOUD_COVER', 'less_than', 20);
                                
var ls8new = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") //new
                                .filter(ee.Filter.bounds(WesternMack_1)) // change this if re-defining project area
                                .filter(ee.Filter.dayOfYear(151,288))
                                .filterMetadata('CLOUD_COVER', 'less_than', 20);
                                
//print('Collection 2 LS8 Images:', ls8new.limit(10))
//print('Collection 2 LS5 Images:', ls5new.limit(10))
//print('Collection 2 LS7 Images:', ls7new.limit(10))

// Defining function to remove Speckle from water occurence sensing code
var removeSpeckle = function(image){
  var imageSel = image.select(['Green', 'NIR']);
  var replaceNegatives = imageSel.where(imageSel.lt(0), 1);
  var returnImage = image.addBands(replaceNegatives, null, true);
  return returnImage;
  };
  

// Filter NEW collections and prepare them for merging.
var etmCol_new = ls7new.map(prepETM);
var tmCol_new = ls5new.map(prepETM);
var oliCol_new = ls8new.map(prepOli);

// Merge the collections.
var allImages_tm_new = etmCol_new
                      .merge(tmCol_new)
                      .map(removeSpeckle);
var allImages_NEW = oliCol_new
                      .merge(allImages_tm_new);

//print('Collection 2 Images:', allImages_NEW.limit(10))
//print('Collection 2 5&7 Images:', allImages_tm_new.limit(10))

///// END IMAGE PREP /////


//////////// STREAM COURSE DATA ////////////////
// Add MERIT_Vectors_Filtered Earth Engine asset to the map
//var MERIT = ee.FeatureCollection(MERIT_VF_Ord7); 
// 'VF_Ord7' stands for vectors filtered for lakes (i.e. remove lakes) and retains only rivers of 7th order and greater
//Map.addLayer(MERIT_VF_Ord7, {color: 'blue'}, 'MERIT_VF_Ord7');


/// FUNCTIONS FOR ANALYSIS ///
// Function for masking all pixels in an image except water pixels
// using normalized differences and bitmasks

//------------------------------------------------------
// Utility code to change band names and extract parts of a bitmask
//------------------------------------------------------

// Helper function to extract the bits in a bitmask for an image
function getQABits(image, start, end, newName) {
    // Compute the bits we need to extract.
    var pattern = 0;
    for (var i = start; i <= end; i++) {
       pattern += Math.pow(2, i);
    }
    // Return a single band image of the extracted QA bits, giving the band
    // a new name.
    return image.select([0], [newName])
                  .bitwiseAnd(pattern)
                  .rightShift(start);
}
//------------------------------------------------------

// Function to calculate median water elevation in each Thiessen 


var waterOnly = function(image){ 
  var land = image.select('SWIR2').lt(0.1).rename('land'); // see doc for notes on this threshold
  var cloudFinal = image.select('Blue').add(image.select('Green'))
      .lt(0.22).rename('cloudFinal'); // see docs for notes on this threshold
  // var snowIceFinal = image.select('B3').divide(image.select('B1'))
  //                     .add(image.select('B4').divide(image.select('B1')))
  //                     .gt(1.6)
  var qa = image.select('pixel_qa');
  // var bitcloud = qa.bitwiseAnd(1 << 5)
  //         .and(qa.bitwiseAnd(1 << 7))
  //         .or(qa.bitwiseAnd(1 << 3));   
  //         // .or(qa.bitwiseAnd(1 << 4)) 
  var cloudShadow = getQABits(image.select('pixel_qa'),10,11,'cloud_shadow_state')
                                   .eq(3)
                                   .rename('cloudShadow');
  var slopeMask = ArcticSlopeMask; 
  
  var snow_ice_qa = qa.updateMask(qa.bitwiseAnd(1 << 4)).rename('snow_ice_qa');
  var snow_ice_qa_b1 = image.select('Blue').lt(2000).rename('snow_ice_qa_b1');
      
  var cloud_qa = qa
      .updateMask(qa.bitwiseAnd(1 << 5)
          .and(qa.bitwiseAnd(1 << 7))
          .or(qa.bitwiseAnd(1 << 3))).rename('cloud_qa');
          
  //var nd = image.normalizedDifference(['NIR','Green']);
  
  var GREEN = image.select('Green');
  var RED = image.select('Red');
  var NIR = image.select('NIR');
  var SWIR1 = image.select('SWIR1');
  var WRI = (GREEN.add(RED)).divide(NIR.add(SWIR1)); 
  
  // save the image's original mask (edges and/or LS7 stripes) for use later
  // can select any band, rename for clarity
  var orig_mask = image.unmask(-1).gte(0).select(["pixel_qa"],["orig_mask"]);
  
  return image.addBands(WRI)
              .addBands(ee.Image(1).rename('water'))
              .updateMask(cloudFinal)
              // .updateMask(snowIceFinal) // this was already commented out
              .updateMask(land)
              .updateMask(slopeMask)
              //.updateMask(cloudShadow.not())
              //.updateMask(bitcloud.not())
              //.updateMask(nd.lt(0)) // previously, threshold of 0
              .updateMask(WRI.gt(1))
              //.updateMask(snow_ice_qa_b1)
              //.addBands(snow_ice_qa)
              //.addBands(cloud_qa) // not using this
              .addBands(orig_mask)
              .addBands(land)
              .addBands(slopeMask)
              .addBands(cloudFinal)
              .addBands(cloudShadow)
              .addBands(snow_ice_qa_b1);
};


// Function to unmask the image, setting valid non-water pixels = 0 and masking invalid pixels
// invalid pixels are those masked in the original image
var getUnmask = function(image){
  return(image.unmask(0).mask(image.select("orig_mask")));
  };


// MAIN FUNCTION FOR ANALYSIS
// For a given set of years:
// Of all selected images, only select water pixels
// Result is mean water occurrence (1 = always water, 0 = never water)
var getWater_years = function(year){
  var startDate = ee.Date.fromYMD(year, 1, 1);
  var endDate = startDate.advance(2, 'year'); // rolling 2 year time window
    
  // get the right connected pixel mask
  //var connectedMask = cpixel_Masks.filter(ee.Filter.eq('year', year)).first(); // only one image should match
 
  var water = allImages_NEW
            .filterDate(startDate, endDate)
            .map(waterOnly)       // mask out non-water pixels
            .map(getUnmask)       // unmask the image to set valid non-water pixels = 0
            .select('water')      // select only the water occurrence band
            .mean()            // compute the mean water occurrence for each pixel across all images
            .gt(0.20)  ;       //threshold for % of time (images) that a pixel must be water to be counted as water (added by JF 04/11/23)
            
  return ee.Image(water
          .updateMask(water) // any pixels that are water in less than X% (currently 20%) of images don't count as water
          //.updateMask(connectedMask) // mask out any lake areas as determined by connected pixels
          .set('start_year',year)
          .rename('water'));
  };
 

// check thiessens extent
//Map.addLayer(thiessenpolys, {}, "thiessens")

var waterbinary16 = getWater_years(2016).cast({'water':'int'});
var connectedPixels16 = waterbinary16.clip(New_cpixel_AOI).connectedPixelCount(1024, false)
                                     .set('year', '2016');
                                     
//Export.image.toAsset({description:'cpixel_1985_Apr23(1)', image:connectedPixels85, scale:100, maxPixels:1e10, region:New_cpixel_AOI});

// define helpers
var years = ee.List.sequence(1985, 2023);
var extent = WesternMack_1.union(New_cpixel_AOI); // spatial extent of entire cpixel mask (this is right!!)
// Resulting mask will be 1 everywhere outside of New_cpixel_AOI
// inside New_cpixel_AOI, the mask will be the normal cpixel mask based on the cpixel analysis

// function to make connected pixel image and transform to usable mask
var make_cpixel = function(year) {
  var waterbinary = getWater_years(year).cast({'water':'int'});
  var connectedPixels = waterbinary.clip(New_cpixel_AOI).connectedPixelCount(1024, false);
  var connectedMask = connectedPixels
                                .eq(1024) // binary image where fully connected water = 1 and lakes = 0
                                .unmask(1, false) // make image 1 where it was previously masked and expand footprint
                                .clip(extent) // just to make it look nice
                                .set('year', year);
  return connectedMask;
};

// make the images, store as list
var connected_collection = years.map(make_cpixel);

//Check to see that images look good
//var cpixel_mask_test = ee.Image(connected_collection.get(30));
//Map.addLayer(cpixel_mask_test, {}, 'cpixel mask 2015') //looks good as of 4/19/23 [JF]
//compare to exported image
//Map.addLayer(cpix_mask_1985, {min:0, max:1, pallette:('white', 'red')}, 'exported cpixel mask 1985'); // looks good!
//Map.addLayer(cpixel_Mask_2014, {min:0, max:1, pallette:('white', 'red')}, 'exported cpixel mask 2014'); // 



// Export: have to change the image and the description for each year -- BRUTE FORCE METHOD
// need to modify this line to export directly to image collection with the asset folder
Export.image.toAsset({image: ee.Image(connected_collection.get(38)), 
                      description: 'cpixel_Mask_2023', // <> modify description name each time
                      assetId: 'ArcticCarbon/cpixel_Masks_Sept23/2023',  // <> modify name each time
                      scale: 100, 
                      maxPixels: 1e13, 
                      region:extent }); // JK 5/18: this needs to be "extent" not "new_cpixel_AOI"




/////////// END MAIN CODE ////////////////




/*
// commenting out tests, uncomment as needed

/// MASK TESTING ///
/// CREATE AND EXPORT CONNECTED PIXEL IMAGES ///
// asset with 2021 image for ls7 and 8 using 2021 data only
//Map.addLayer(cpixel2021, {min:0, max:1024, palette:["red", "blue", "green"]}, "2021 ls7/8")
//Map.addLayer(cpixel1984, {min:0, max:1024, palette:["red", "blue", "green"]}, "1984 cpixel")
//Map.addLayer(cpixel2021, {min:0, max:1024, palette:["red", "blue", "green"]}, "2021 cpixel")
//Map.addLayer(cpixel1985test2, {min:0, max:1024, palette:["red", "blue", "green"]}, "1985 cpixel")
//Map.addLayer(cpixel1984old, {min:0, max:1024, palette:["red", "blue", "green"]}, "1984 old")
//Map.addLayer(cpixel2021old, {min:0, max:1024, palette:["red", "blue", "green"]}, "2021 old")

// export connected pixel image each year
// get ready this is gonna be ugly
var gwytest = getWater_years(1984);
//Map.addLayer(gwytest,{},"water years")
//Map.addLayer(getWater_years(1985), {}, "1985 GWY")
/*
var cpixel_images = ee.ImageCollection("users/jackkreisler/MackRiverCPixelCollect");
Map.addLayer(cpixel_images.filterMetadata("year", "equals", "1985"), {min:0, max:1024, palette:["red", "blue", "green"]}, "cpixel image")

// massive code block below b/c didn't make a loop. fix later if time
var waterbinary = getWater_years(1985).cast({'water':'int'});
var connectedPixels = waterbinary.clip(New_cpixel_AOI).connectedPixelCount(1024, false)
                                 .set('year', '1985');
Map.addLayer(connectedPixels,{min:0, max:1024, palette:["red", "blue", "green"]}, "new image")
Export.image.toAsset({description:'proj_out_1985test2', image:connectedPixels, scale:100, maxPixels:1e10, region:New_cpixel_AOI});


/// VARIOUS TESTS ///
// show 2020 pixels that we count as water (as a mask)
  var binary_2020 = getWater_years(2019);
  // cast water occurence to int (its either 0 or 1)
  var binary_2020_int = binary_2020.cast({'water':'int'});
  Map.addLayer(binary_2020, {bands: 'water', min:0,max:1, palette: ['white','purple']}, '2019');
  var small_30m = ee.Image('users/jackkreisler/2019-small-30m');
  Map.addLayer(small_30m, {min:0, max:1024, palette:['blue', 'green', 'red']}, '2019 30m');
// show entire binary image and not just mask
  //var unmasked = binary_2020.unmask();
  //Map.addLayer(unmasked, {min:0, max:1, palette:['white', 'orange']}, '2020 unmasked');
  
  // find an image in 2020 with low cloud cover 
  //var imgs = riverImage2020.filterBounds(rivers_asset).sort('CLOUD_COVER').limit(10);
  //Map.addLayer(imgs.first(), landsat_vis, '2020 image'); // look at the img if you want
  
  
  // do NDWI on that image and show it (as a mask)
  //var normdiff = imgs.first().normalizedDifference(['B5','B2']).lt(0);
  //normdiff = normdiff.updateMask(normdiff);
  //Map.addLayer(normdiff, {min:0, max:1}, 'norm diff');
  // look at norm diff on top of 2020 unmasked--you can see where areas that pass the
  // NDWI test are masked out in final water calculation because they fail the 
  // snow/ice/land/cloud mask (unlikely) or they are water <50% of the time (likely)
  
  // do connected pixels on portion of 2020 NDWI image
  var connectedPixels = binary_2020_int.clip(geometry).connectedPixelCount(1024, false);
  //Map.addLayer(connectedPixels, {min:0, max:1024, palette:['blue', 'green', 'red']}, '2020 connected');
  //Export.image.toAsset({description:'2019-small-30m', image:connectedPixels, scale:30, maxPixels:1e10, region:geometry})
  
  // mask pixels with less than 1024 connections
  var binary_connectMasked = binary_2020_int.updateMask(connectedPixels.eq(1024));
  //Map.addLayer(binary_connectMasked, {min:0, max:1, palette:['white', 'purple']}, 'connection mask');
  //Export.image.toAsset({description:'spot1-2020-8-mask', image:binary_connectMasked, scale:150, maxPixels:1e10, region:AOI})
  
  
  var connectedPixelsAll = binary_2020_int.clip(segmentBuffers_asset).connectedPixelCount(1024);
  //Map.addLayer(connectedPixelsAll, {min:0, max:1024, palette:['blue', 'green', 'red']}, '2020 connected all');
  //Export.image.toAsset({description:'allbuffers-150m-8', image:connectedPixelsAll, scale:100, maxPixels:1e10, region:entireBasin})
  
  
  // turn mask into feature collection
  //var connected_features = binary_connectMasked.reduceToVectors({scale:30});
  //print(connected_features);
 

  // import assets
  var spot1 = ee.Image('users/jackkreisler/spot1-2020-4')
  var spot1mask = ee.Image('users/jackkreisler/spot1-2020-4-mask')
  var spot1_100m = ee.Image('users/jackkreisler/spot1-2020-8-100m')
  var allBuffers_150m = ee.Image('users/jackkreisler/allbuffers-150m-4-entireBasin')
  var allBuffers_100m = ee.Image('users/jackkreisler/allbuffers-100m-8');
  var spot1_100m_max = ee.Image('users/jackkreisler/spot1-2020-8-100m-max');
  var spot2_30m = ee.Image('users/jackkreisler/spot2-2020-8-30m');
  var final1 = ee.Image('users/jackkreisler/finalAOI-2019-150m');
  var f1986 = ee.Image('users/jackkreisler/mack_river_cpixel/proj_out_1986');
  var f1989 = ee.Image('users/jackkreisler/mack_river_cpixel/proj_out_1989');
  Map.addLayer(f1986, {min:0, max:1024, palette:['blue', 'green', 'red']}, '1986');
  var processed_1986 = f1986.lt(1024) // binary image where lakes = 1
                            .unmask() // make image 0 where no data (land, ice, etc)
                            .not() // rivers plus land/ice/etc are 1, only lakes set to zero (to mask out)
                            .set('system:footprint', latMask.geometry()) // change footprint to cover entire world
                            .unmask() // make image 0 where it was previously masked
                            .add(latMask) // make image 1 where below 67.7 deg lat
                            .clip(WesternMack); // not necessary?
  Map.addLayer(processed_1986, {}, '1986 mask')
  //var binary1986 = getWater_years(1986);
  //Map.addLayer(binary1986.clip(AOI), {bands: 'water', min:0,max:1, palette: ['white','purple']}, '1986 binary');
  //Map.addLayer(binary1986.clip(AOI).updateMask(processed_1986), {bands: 'water', min:0,max:1, palette: ['white','purple']}, '1986 binary masked')
  
  var binary1989 = getWater_years(1989);
  var processed_1989 = f1989.lt(1024) // binary image where lakes = 1
                            .unmask() // make image 0 where no data (land, ice, etc)
                            .not() // rivers plus land/ice/etc are 1, only lakes set to zero (to mask out)
                            .set('system:footprint', latMask.geometry()) // change footprint to cover entire world
                            .unmask() // make image 0 where it was previously masked
                            .add(latMask) // make image 1 where below 67.7 deg lat
                            .clip(WesternMack); // not necessary?

  Map.addLayer(binary1989.clip(AOI), {bands: 'water', min:0,max:1, palette: ['white','purple']}, '1989 binary');
  //Map.addLayer(binary1989.clip(AOI).updateMask(processed_1989), {bands: 'water', min:0,max:1, palette: ['white','purple']}, '1989 binary masked')
  
  
  Map.addLayer(final1, {min:0, max:1024, palette:['blue', 'green', 'red']}, 'final1');
  Map.addLayer(spot1, {min:0, max:1024, palette:['blue', 'green', 'red']}, 'spot1');
  Map.addLayer(spot1.lt(1024), {min:0, max:1, palette:['white', 'red']}, 'spot1 lakes');
  Map.addLayer(spot1mask, {min:0, max:1, palette:['white', 'red']}, 'spot1mask');
  Map.addLayer(spot1_100m, {min:0, max:1024, palette:['blue', 'green', 'red']}, 'spot1_100m');
  Map.addLayer(allBuffers_150m, {min:0, max:1024, palette:['blue', 'green', 'red']}, 'whole basin 150');
  Map.addLayer(allBuffers_100m, {min:0, max:1024, palette:['blue', 'green', 'red']}, 'whole basin 100');
  Map.addLayer(spot1_100m_max, {min:0, max:1024, palette:['blue', 'green', 'red']}, 'spot1_100m_max');
  Map.addLayer(spot2_30m, {min:0, max:1024, palette:['blue', 'green', 'red']}, 'spot 2 30m');

  // turn the mask into a feature collection
  // MAKE SURE SCALE IS THE SAME AS SCALE USED TO GENERATE MASK
  var spot1_shapes = spot1mask.reduceToVectors({scale:150})
  //Map.addLayer(spot1_shapes, {}, '150m shapes');
  
  var spot1_100m_mask = spot1_100m.mask(spot1_100m.eq(1024));
  var spot1_100m_shapes = spot1_100m_mask.reduceToVectors({scale:100});
  //Map.addLayer(spot1_100m_shapes, {}, '100m shapes');
  
  // lakes to filter out
  var badlakes = lakes.filterBounds(AOI).filterMetadata('Lake_area', 'greater_than', 10)
  //Map.addLayer(badlakes, {}, 'bad lakes');
  var filtered = spot1_100m_shapes.filter(ee.Filter.bounds(badlakes).not())
  //Map.addLayer(filtered, {}, 'filtered');

  //Map.setCenter(-134.13, 68.12, 9); // spot check 1
  
// show lakes
//Map.addLayer(lakes.filterBounds(AOI3).filterMetadata('Lake_area', 'greater_than', 2), {}, 'lakes')




////// OLD IMAGE IMPORT, USED FOR MAKING CPIXEL IMAGES 1985-2020 /////
//// IMPORT IMAGES ////
// using Landsat 5, 7, and 8
// using Collection 1 b/c water pixel detection algorithm is designed for that data
// (Collection 2 has different scaling factors)
/*
var ls5 = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR');
var ls7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
          .filterDate('1999-01-01', '2003-01-01');
var ls8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
    .map(function(image) { 
      var imageSelect = image.select(['B1','B2','B3','B4','B5', 'B6', 'B7', 'B10', 'B11', 'pixel_qa']);
      var returnImage = imageSelect.rename(['B0','B1','B2','B3','B4','B5', 'B7', 'B6', 'B11', 'pixel_qa']);
    return returnImage;
    });
var oldvis = {bands:['B3', 'B2', 'B1'], min:0, max:2000};

  // Defining function to remove Speckle from water occurence sensing code
var removeSpeckle = function(image){
  var imageSel = image.select(['B2', 'B5']);
  var replaceNegatives = imageSel.where(imageSel.lt(0), 1);
  var returnImage = image.addBands(replaceNegatives, null, true);
  return returnImage;
  };

// Merge landsat images together
var images = ls5
      .merge(ls7)
      .merge(ls8)
      .filter(ee.Filter.bounds(WesternMack)) // change this if re-defining project area
      .filter(ee.Filter.dayOfYear(151,270))
      .filterMetadata('CLOUD_COVER', 'less_than', 20)
      .map(removeSpeckle);
      
///// END OLD IMAGE IMPORT /////
*/