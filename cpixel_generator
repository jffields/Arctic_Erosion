/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var New_cpixel_AOI = 
    /* color: #5220d6 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-133.965367054451, 67.70163967529295],
          [-133.954379343736, 67.80978401066871],
          [-133.89394771213844, 67.86573930174703],
          [-133.9269102520006, 67.93601095480037],
          [-133.80055313545822, 68.01841210695784],
          [-133.73462760090118, 68.07386747444518],
          [-133.72913374855213, 68.09795928576627],
          [-133.67968967043697, 68.10513068405275],
          [-133.65496760960747, 68.11485974236905],
          [-133.64810025240658, 68.15271273813845],
          [-133.7758307448652, 68.16191085922013],
          [-134.24005566052864, 68.20376666906606],
          [-134.1205657436365, 68.26996695929493],
          [-133.92278910214284, 68.39370357428372],
          [-133.94751102539507, 68.4810282009582],
          [-134.0230506308254, 68.55446250501647],
          [-134.10408406873006, 68.67116123899149],
          [-134.17000968094726, 68.71258563235436],
          [-134.41173717809684, 68.83739068478991],
          [-134.6520915792932, 68.95804575261798],
          [-134.7138970909606, 69.00139938646362],
          [-134.91716807244248, 68.97480603220676],
          [-134.96798568395178, 68.94077894009473],
          [-134.87047034533376, 68.89236035257777],
          [-134.6630786995987, 68.76527084631734],
          [-134.46237492964588, 68.6274852394607],
          [-134.39507573397157, 68.4863954284469],
          [-134.52555303519972, 68.27385905858004],
          [-134.61026458431925, 68.12065213970762],
          [-134.67033130647616, 68.01998013226864],
          [-134.69642647659177, 67.90764371076529],
          [-134.76149574841546, 67.69742465452227],
          [-134.93957242845428, 67.59947578660257],
          [-134.93290087421306, 67.48577873034489],
          [-134.61577674132107, 67.58020599374713],
          [-134.39367950440356, 67.6300859527481]]]),
    WesternMack_1 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-136.6456709949952, 69.08700872525338],
          [-135.9095870106202, 67.87016851592068],
          [-139.8097334949952, 65.58436510570839],
          [-137.7223311512452, 64.72117178492286],
          [-137.0961104481202, 64.18582131453974],
          [-132.86735897662507, 64.13488777854788],
          [-132.14226132037507, 63.96663147147016],
          [-131.72478085162507, 63.62706112028824],
          [-132.16423397662507, 61.21772241622296],
          [-130.81291561725007, 58.961706898233146],
          [-127.73674374225007, 56.99327089862608],
          [-126.27556210162507, 55.547683741517396],
          [-124.39450906519401, 55.18418223783264],
          [-123.46067117456901, 54.82504107514072],
          [-122.66965554956901, 54.57108866017406],
          [-119.70334695581901, 53.55889196832195],
          [-117.87961648706901, 52.48844832964847],
          [-115.04514383081901, 52.94100627077756],
          [-112.71604226831901, 54.187173343213814],
          [-111.51853250269401, 55.259381607205],
          [-109.68381570581901, 55.781807596214904],
          [-107.81613992456901, 56.79995924397231],
          [-107.93698953394401, 57.337475413529546],
          [-110.2660286621488, 58.19765033824793],
          [-110.6780159668363, 58.461542875776566],
          [-110.7823860840238, 58.6463837443152],
          [-110.87851645511755, 58.64209618896625],
          [-111.02133872074255, 58.742002033794655],
          [-111.0185921387113, 59.54630702154173],
          [-112.3589241699613, 60.540548039770066],
          [-113.11835410160192, 61.29017605178613],
          [-113.56879355472692, 61.34158994661358],
          [-113.66217734378942, 61.31259760425681],
          [-114.01648642582067, 60.892299219090994],
          [-114.63446738285192, 60.8695777282006],
          [-114.93109824222692, 60.858879663748255],
          [-115.15082480472692, 60.79997622390134],
          [-116.18903281253942, 60.90832818122992],
          [-116.83447958988317, 61.12393190089451],
          [-117.7971565918363, 61.64517054926209],
          [-119.22054667045435, 62.47716940751586],
          [-119.90169901420435, 62.750060973609536],
          [-122.31319803764185, 62.69467530114029],
          [-122.99600661276838, 63.55539257222384],
          [-124.15231764792463, 64.60551065147534],
          [-123.80075514792463, 64.79331762591438],
          [-123.62772047995588, 64.95425769744203],
          [-123.33246291159651, 65.04943298104435],
          [-123.51511061667463, 65.15811986175466],
          [-124.08509852381793, 65.23314032381094],
          [-125.22767664881793, 65.83822432510175],
          [-126.28236414881793, 66.43049026853159],
          [-127.64673126694969, 66.52074455978627],
          [-128.20909393784814, 66.45911486041581],
          [-130.0117241586976, 67.33934298019352],
          [-130.9180962290101, 67.55214316628319],
          [-131.2312065805726, 67.52695949984033],
          [-131.7200981821351, 67.47230296197807],
          [-132.9066216196351, 67.30121806529371],
          [-133.3790337290101, 67.54165322583393],
          [-133.3131157602601, 67.75473063347964],
          [-133.77462392248088, 68.11158271667242],
          [-133.64004140294963, 68.54969176170329],
          [-133.83779530919963, 69.47427105762804],
          [-135.28799062169963, 69.73462108489251]]]),
    Good_Thiessens = ee.FeatureCollection("users/jordanffieldsgr/ArcticCarbon/Good_Thiessens_3"),
    Mack_SlopeMask = ee.Image("users/jordanffieldsgr/ArcticCarbon/Mack_SlopeMask"),
    exported_masks = ee.ImageCollection("users/jordanffieldsgr/ArcticCarbon/cpixel_Masks_Sept23");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// uncomment to add study area, cpixel area, and thiessen polygons to map
//Map.addLayer(WesternMack_1, {}, 'Western Mack 1');
//Map.addLayer(New_cpixel_AOI, {}, 'New CPixel AOI');
//Map.addLayer(Good_Thiessens, {}, 'Good Thiessens');
// Note -- exported_masks is the final version of cpixel masks, included
// as an export here for transparency


///////////////////////////////////////////////////////////////////////////////////////////////
                /////// PREPARE IMAGE COLLECTIONS FOR ANALYSIS ///////
///////////////////////////////////////////////////////////////////////////////////////////////

////// RENAME BANDS ///////
//Function to get and rename bands all landsat 8 collection 2 images.
function renameOli(img) {
  return img.select(
    ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'QA_PIXEL', 'SR_QA_AEROSOL'],
    ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa', 'SR_QA_AEROSOL']);
}

// Functions to rename bands in LS5 and LS7 Collection 2 images.
function renameEtm(img) {
  return img.select(
      ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL'],
      ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']);
}

//////// SCALE BANDS TO SURFACE REFLECTANCE //////////
// Transformation function, scales Raw Collection 2 Level 2 Landsat data
// to surface refelctance values, as explained here:
// https://www.usgs.gov/faqs/how-do-i-use-a-scale-factor-landsat-level-2-science-products
// FOR LANDSAT8
function Olito_SR(img) {
  return img.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
  .multiply(0.0000275) // scaling to surf reflectance
  .add(-0.2)
  .addBands(img.select('pixel_qa'))
  .addBands(img.select('SR_QA_AEROSOL'));
}

// Transformation function, scales Raw Collection 2 Level 2 Landsat data
// to surface refelctance values. 
// FOR LANDSAT 5 AND LANDSAT 7 COLLECTIONS
function ETMto_SR(img) {
  return img.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
  .multiply(0.0000275) // scaling to surf reflectance
  .add(-0.2)
  .addBands(img.select('pixel_qa'));
}

////////// FULL IMAGE PREP ///////////
// Define wrapper function to prepare images: 
// consolidates all above functions for convenience in 
// applying them to their respective image collections.
function prepOli(img) {
  var orig = img;
  img = renameOli(img);
  img = Olito_SR(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}

// Define function to prepare ETM+ images.
// works for TM images as well (landsat 5)
function prepETM(img) {
  var orig = img;
  img = renameEtm(img);
  img = ETMto_SR(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}

//// IMPORT IMAGES ////

// COLLECTION 2 DATA //
var ls5new = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
                                .filter(ee.Filter.bounds(WesternMack_1)) // change this if re-defining project area
                                .filter(ee.Filter.dayOfYear(151,288))
                                .filterMetadata('CLOUD_COVER', 'less_than', 20);
var ls7new = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
                                .filter(ee.Filter.bounds(WesternMack_1)) // change this if re-defining project area
                                .filter(ee.Filter.dayOfYear(151,288))
                                .filterMetadata('CLOUD_COVER', 'less_than', 20);
                                
var ls8new = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
                                .filter(ee.Filter.bounds(WesternMack_1)) // change this if re-defining project area
                                .filter(ee.Filter.dayOfYear(151,288))
                                .filterMetadata('CLOUD_COVER', 'less_than', 20);


// Defining function to remove Speckle from water occurence sensing code
var removeSpeckle = function(image){
  var imageSel = image.select(['Green', 'NIR']);
  var replaceNegatives = imageSel.where(imageSel.lt(0), 1);
  var returnImage = image.addBands(replaceNegatives, null, true);
  return returnImage;
  };
  
// Filter NEW collections and prepare them for merging.
var etmCol_new = ls7new.map(prepETM);
var tmCol_new = ls5new.map(prepETM);
var oliCol_new = ls8new.map(prepOli);

// Merge the collections.
var allImages_tm_new = etmCol_new
                      .merge(tmCol_new)
                      .map(removeSpeckle);
var allImages_NEW = oliCol_new
                      .merge(allImages_tm_new);

///// END IMAGE PREP /////

/// FUNCTIONS FOR ANALYSIS ///
// Function for masking all pixels in an image except water pixels
// using normalized differences and band-based masks

var waterOnly = function(image){ 
  var land = image.select('SWIR2').lt(0.1).rename('land');
  var cloudFinal = image.select('Blue').add(image.select('Green'))
      .lt(0.22).rename('cloudFinal');
  /*
  Note that land and cloudfinal thresholds are different than in
  master_meander_rates, because here we have scaled image data to surface
  reflectance (see scale bands section above). Since both image data and threshold values
  here are scaled identically, water detection results are functionally identical to
  master_meander_rates ***
  */
 
  var GREEN = image.select('Green');
  var RED = image.select('Red');
  var NIR = image.select('NIR');
  var SWIR1 = image.select('SWIR1');
  var WRI = (GREEN.add(RED)).divide(NIR.add(SWIR1)).rename("WRI"); // added rename to WRI 12/15
  
  // save the image's original mask (edges and/or LS7 stripes) for use later
  // can select any band, rename for clarity
  var orig_mask = image.unmask(-1).gte(0).select(["pixel_qa"],["orig_mask"]);
  
  return image.addBands(WRI)
              .addBands(ee.Image(1).rename('water'))
              .updateMask(cloudFinal)
              .updateMask(land)
              .updateMask(Mack_SlopeMask)
              .updateMask(WRI.gt(1))
              .addBands(orig_mask);
};

// Function to unmask the image, setting valid non-water pixels = 0 and masking invalid pixels
// invalid pixels are those masked in the original image
var getUnmask = function(image){
  return(image.unmask(0).mask(image.select("orig_mask")));
  };

// For a given set of years:
// Of all selected images, only select water pixels
// Result is mean water occurrence (1 = always water, 0 = never water)
var getWater_years = function(year){
  var startDate = ee.Date.fromYMD(year, 1, 1);
  var endDate = startDate.advance(2, 'year'); // rolling 2 year time window
    
  // get the right connected pixel mask
  //var connectedMask = cpixel_Masks.filter(ee.Filter.eq('year', year)).first(); // only one image should match
 
  var water = allImages_NEW
            .filterDate(startDate, endDate)
            .map(waterOnly)       // mask out non-water pixels
            .map(getUnmask)       // unmask the image to set valid non-water pixels = 0
            .select('water')      // select only the water occurrence band
            .mean()            // compute the mean water occurrence for each pixel across all images
            .gt(0.20)  ;       //threshold for % of time (images) that a pixel must be water to be counted as water (added by JF 04/11/23)
            
  return ee.Image(water
          .updateMask(water) // any pixels that are water in less than 20% of images don't count as water
          .set('start_year',year)
          .rename('water'));
  };


// IMAGE CREATION AND EXPORT

// define helpers
var years = ee.List.sequence(1985, 2023);
var extent = WesternMack_1.union(New_cpixel_AOI); // spatial extent of entire cpixel mask
// need to union b/c part of New_cpixel_AOI is outside of WesternMack_1
// Resulting mask will be 1 everywhere outside of New_cpixel_AOI
// inside New_cpixel_AOI, the mask will be the normal cpixel mask based on the cpixel analysis

// function to make connected pixel image and transform to usable mask
var make_cpixel = function(year) {
  var waterbinary = getWater_years(year).cast({'water':'int'});
  var connectedPixels = waterbinary.clip(New_cpixel_AOI).connectedPixelCount(1024, false);
  var connectedMask = connectedPixels
                                .eq(1024) // binary image where fully connected water = 1 and lakes = 0
                                .unmask(1, false) // make image 1 where it was previously masked and expand footprint
                                .clip(extent) // just to make it look nice
                                .set('year', year);
  return connectedMask;
};

// make the images, store as list
var connected_collection = years.map(make_cpixel);

// Export: have to change the image and the description for each year -- BRUTE FORCE METHOD
Export.image.toAsset({image: ee.Image(connected_collection.get(38)), // modify number to get each time 
                      description: 'cpixel_Mask_2023', // modify description name each time
                      assetId: 'ArcticCarbon/cpixel_Masks_Sept23/2023',  // modify name each time
                      scale: 100, 
                      maxPixels: 1e13, 
                      region:extent});
